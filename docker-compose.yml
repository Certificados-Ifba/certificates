version: '3'
services:
  web:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.web
    hostname: web
    command: yarn workspace @certificates/web prod
    restart: always
    env_file:
      - .env
    ports:
      - 3000:3000
    networks:
      - frontend
  gateway:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.gateway
    hostname: gateway
    command: yarn workspace @certificates/gateway prod
    restart: always
    env_file:
      - .env
    ports:
      - 3001:3001
    networks:
      - backend
      - frontend
  event:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.event
    hostname: event
    command: yarn workspace @certificates/event prod
    restart: always
    env_file:
      - .env
    links:
      - db
    networks:
      - backend
  generic:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.generic
    hostname: generic
    command: yarn workspace @certificates/generic prod
    restart: always
    env_file:
      - .env
    links:
      - db
    networks:
      - backend
  token:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.token
    hostname: token
    command: yarn workspace @certificates/token prod
    restart: always
    env_file:
      - .env
    links:
      - db
    networks:
      - backend
  mailer:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.mailer
    hostname: mailer
    command: yarn workspace @certificates/mailer prod
    restart: always
    env_file:
      - .env
    links:
      - db
    networks:
      - backend
  permission:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.permission
    hostname: permission
    command: yarn workspace @certificates/permission prod
    restart: always
    env_file:
      - .env
    networks:
      - backend
  user:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.user
    hostname: user
    command: yarn workspace @certificates/user prod
    restart: always
    env_file:
      - .env
    networks:
      - backend
  fix-db-permissions:
    image: 'bitnami/mongodb:latest'
    user: root
    command: 'chown -R 1001:1001 /bitnami/mongodb'
    volumes:
      - './docker/db:/bitnami/mongodb'
  db:
    image: 'bitnami/mongodb:latest'
    restart: always
    environment:
      - MONGODB_USERNAME=mongo
      - MONGODB_PASSWORD=pass
      - MONGODB_DATABASE=certificates
    volumes:
      - './docker/db:/bitnami/mongodb'
    ports:
      - 27017:27017
    depends_on:
      - fix-db-permissions
    networks:
      - backend
    restart: always
  gui-db:
    image: mongo-express
    restart: always
    ports:
      - 4000:8081
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=false
      - ME_CONFIG_MONGODB_SERVER=db
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_AUTH_DATABASE=certificates
      - ME_CONFIG_MONGODB_AUTH_USERNAME=mongo
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=pass
    links:
      - db
    networks:
      - backend
      - frontend
networks:
  backend:
    driver: bridge
  frontend:
    external:
      name: infrastructure
